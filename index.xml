<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
    <channel>
        <title>专注于Java、Golang、软件架构、项目管理</title>
        <link>http://localhost:1313/</link>
        <description>Recent content on 专注于Java、Golang、软件架构、项目管理</description>
        <generator>Hugo -- gohugo.io</generator>
        <language>zh-cn</language>
        <lastBuildDate>Fri, 24 May 2024 17:58:43 +0800</lastBuildDate><atom:link href="http://localhost:1313/index.xml" rel="self" type="application/rss+xml" /><item>
        <title>Pingora网关</title>
        <link>http://localhost:1313/posts/rust/pingora01/</link>
        <pubDate>Fri, 24 May 2024 17:58:43 +0800</pubDate>
        
        <guid>http://localhost:1313/posts/rust/pingora01/</guid>
        <description>&lt;p&gt;欣闻cloudflare开源了他们的反向代理或者说微服务网关组件 Pingora -  &lt;a class=&#34;link&#34; href=&#34;https://github.com/cloudflare/pingora&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;https://github.com/cloudflare/pingora&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;如下，是pingora网关反向代理与缓存核心代码&lt;/p&gt;</description>
        </item>
        <item>
        <title>java使用虚拟线程遇到的问题</title>
        <link>http://localhost:1313/posts/java/virtualthreads/</link>
        <pubDate>Tue, 12 Dec 2023 12:22:44 +0800</pubDate>
        
        <guid>http://localhost:1313/posts/java/virtualthreads/</guid>
        <description>&lt;h2 id=&#34;虚拟线程&#34;&gt;虚拟线程
&lt;/h2&gt;&lt;p&gt;虚拟线程（Virtual Thread）是 JDK 而不是 OS 实现的轻量级线程，由 JVM 调度。许多虚拟线程共享同一个操作系统线程，虚拟线程的数量可以远大于操作系统线程的数量。它们可以更有效地运行以thread-per-request（每个请求一个线程，就大大降低了线程上下文的切换）的方式编写的服务器应用程序，从而实现更高的吞吐量和更少的硬件浪费。&lt;/p&gt;</description>
        </item>
        <item>
        <title>升级到springboot3与jdk21需要做的工作</title>
        <link>http://localhost:1313/posts/java/springboot3jdk21/</link>
        <pubDate>Tue, 12 Sep 2023 12:22:44 +0800</pubDate>
        
        <guid>http://localhost:1313/posts/java/springboot3jdk21/</guid>
        <description>&lt;p&gt;随着springboot3的正式版推出，最小可用的jdk版本为17。最大的亮点是颠覆性的zgc，可以将stw时间控制在亚毫秒级别，接着jdk21推出了分代zgc。根据jdk官方说法，此gc算法适用于任何内存条件下，多核cpu环境。我们也在各个环境的生产系统做到了验证（2c4g、4c8g、8c16g）。对于中间件，rocketmq、kafka、es、nacos等。因所用jdk版本尚未完全支持，且目前也没有遇到过问题，暂未做升级。&lt;/p&gt;</description>
        </item>
        <item>
        <title>慢sql经验总结</title>
        <link>http://localhost:1313/posts/project/project03/</link>
        <pubDate>Mon, 20 Jun 2022 21:00:00 +0800</pubDate>
        
        <guid>http://localhost:1313/posts/project/project03/</guid>
        <description>&lt;p&gt;在过去的工作中，如何在各个环境中（开发、测试、生产）快速准确的发现应用的慢sql，并进行高效的推动，是一个很大的挑战。以下是一些经验&lt;/p&gt;
&lt;h2 id=&#34;慢sql的定义&#34;&gt;慢sql的定义
&lt;/h2&gt;&lt;p&gt;我们将执行时间超过1秒的sql都定义为慢sql。同时会导致&lt;/p&gt;</description>
        </item>
        <item>
        <title>java对象转换神器-mapstruct</title>
        <link>http://localhost:1313/posts/project/project02/project02/</link>
        <pubDate>Tue, 14 Jun 2022 21:00:00 +0800</pubDate>
        
        <guid>http://localhost:1313/posts/project/project02/project02/</guid>
        <description>&lt;p&gt;在java开发中，对象之间的转换是一项常见的任务。通常有2种做法：手写和使用&lt;code&gt;JavaBeanUtils&lt;/code&gt;。前者降低工作效率还容易出错，而后者因为使用了反射又会导致性能下降。为了解决这个问题，java社区出现了&lt;code&gt;Mapstruct&lt;/code&gt;框架。它是一个强大的代码生成器，在编译时生成代码，使对象间的映射变得简单、高效和高性能，降低了维护成本。&lt;/p&gt;</description>
        </item>
        <item>
        <title>java项目中的一些通用处理</title>
        <link>http://localhost:1313/posts/project/project01/</link>
        <pubDate>Sat, 11 Jun 2022 21:00:00 +0800</pubDate>
        
        <guid>http://localhost:1313/posts/project/project01/</guid>
        <description>&lt;h2 id=&#34;一全局异常处理&#34;&gt;一、全局异常处理
&lt;/h2&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt; 1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 4
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 5
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 6
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 7
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 8
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 9
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;10
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;11
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;12
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;13
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;14
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;15
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;16
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;17
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;18
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;19
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;20
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;21
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;22
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;23
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;24
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;25
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;26
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;27
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;28
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;29
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;30
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;31
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;32
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;33
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;34
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;35
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;36
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;37
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;38
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;39
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;40
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;41
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;42
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;43
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;44
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;45
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;46
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;47
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;48
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;49
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;50
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;51
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;52
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;53
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;54
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;55
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;56
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;57
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;58
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;59
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;60
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;61
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;62
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;63
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;64
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;65
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;66
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;67
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;68
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;69
&lt;/span&gt;&lt;/code&gt;&lt;/pr</description>
        </item>
        <item>
        <title>Go1.18：新的切片扩容策略</title>
        <link>http://localhost:1313/posts/golang/go118-new-growslice/</link>
        <pubDate>Sun, 27 Mar 2022 14:04:09 +0800</pubDate>
        
        <guid>http://localhost:1313/posts/golang/go118-new-growslice/</guid>
        <description>&lt;p&gt;随着go 1.18版本的发布，go社区终于迎来了期盼已久的正式泛型语法，然而我在浏览关于1.18的changelog时发现1.18对于slice的扩容策略也做了一些修改，刚好我最近正在看draven大佬的新书也讲到了slice底层的源码的一些运行逻辑，在好奇心的驱使下，想知道社区究竟改动了什么以及为什么作出这些改动，于是翻开1.18的源码，便有了这篇文章。&lt;/p&gt;</description>
        </item>
        <item>
        <title>nacos客户端是如何进行服务发现的？</title>
        <link>http://localhost:1313/posts/java/springcloud/sca02/</link>
        <pubDate>Tue, 02 Jun 2020 22:00:00 +0800</pubDate>
        
        <guid>http://localhost:1313/posts/java/springcloud/sca02/</guid>
        <description>&lt;p&gt;本来自己写了一遍，但从网上找到的一个源码分析图。觉得比自己总结的好且更为细致，就直接放过来了。一图胜千言。&lt;/p&gt;
&lt;p&gt;&lt;a class=&#34;link&#34; href=&#34;https://xie.infoq.cn/article/d342a914b8754dd52f5709b43&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;https://xie.infoq.cn/article/d342a914b8754dd52f5709b43&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;http://localhost:1313/posts/java/springcloud/sca02/nacos.png&#34;
	width=&#34;5085&#34;
	height=&#34;4202&#34;
	srcset=&#34;http://localhost:1313/posts/java/springcloud/sca02/nacos_hu8464151691073768759.png 480w, http://localhost:1313/posts/java/springcloud/sca02/nacos_hu17852874348580822770.png 1024w&#34;
	loading=&#34;lazy&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;121&#34;
		data-flex-basis=&#34;290px&#34;
	
&gt;&lt;/p&gt;</description>
        </item>
        <item>
        <title>nacos注册中心初始化</title>
        <link>http://localhost:1313/posts/java/springcloud/sca01/</link>
        <pubDate>Mon, 01 Jun 2020 21:00:00 +0800</pubDate>
        
        <guid>http://localhost:1313/posts/java/springcloud/sca01/</guid>
        <description>&lt;p&gt;注册中心启动类就一个springboot应用，看不出什么东西&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;4
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;5
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;6
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;7
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;8
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;nd&#34;&gt;@EnableScheduling&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;nd&#34;&gt;@SpringBootApplication&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;scanBasePackages&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;com.alibaba.nacos.naming&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;com.alibaba.nacos.core&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;})&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;kd&#34;&gt;public&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;kd&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;nc&#34;&gt;NamingApp&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;    
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;kd&#34;&gt;public&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;kd&#34;&gt;static&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;void&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;main&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;String&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;[]&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;args&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;        &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;SpringApplication&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;run&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;NamingApp&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;class&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;args&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pr</description>
        </item>
        <item>
        <title>SpringCloud源码| zuul源码</title>
        <link>http://localhost:1313/posts/java/springcloud/sc06/</link>
        <pubDate>Fri, 13 Dec 2019 21:00:00 +0800</pubDate>
        
        <guid>http://localhost:1313/posts/java/springcloud/sc06/</guid>
        <description>&lt;p&gt;zuul主要使用责任链设计模式&lt;/p&gt;
&lt;p&gt;其中有如下过滤器&lt;/p&gt;
&lt;p&gt;pre过滤器&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;-3：ServletDetectionFilter&lt;/li&gt;
&lt;li&gt;-2：Servlet30WrapperFilter&lt;/li&gt;
&lt;li&gt;-1：FromBodyWrapperFilter&lt;/li&gt;
&lt;li&gt;1：DebugFilter&lt;/li&gt;
&lt;li&gt;5：PreDecorationFilter&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;routing过滤器&lt;/p&gt;</description>
        </item>
        <item>
        <title>dubbo源码浅析</title>
        <link>http://localhost:1313/posts/java/framework/dubbo/dubbo01/</link>
        <pubDate>Tue, 20 Jun 2017 21:00:00 +0800</pubDate>
        
        <guid>http://localhost:1313/posts/java/framework/dubbo/dubbo01/</guid>
        <description>&lt;p&gt;Dubbo 为了更好地达到 OCP 原则（即“对扩展开放，对修改封闭”的原则），采用了“&lt;strong&gt;微内核+插件&lt;/strong&gt;”的架构。那什么是微内核架构呢？微内核架构也被称为插件化架构（Plug-in Architecture），这是一种面向功能进行拆分的可扩展性架构。内核功能是比较稳定的，只负责管理插件的生命周期，不会因为系统功能的扩展而不断进行修改。功能上的扩展全部封装到插件之中，插件模块是独立存在的模块，包含特定的功能，能拓展内核系统的功能。&lt;/p&gt;</description>
        </item>
        <item>
        <title>事务隔离级别，MVCC与国内主流分布式事务方案</title>
        <link>http://localhost:1313/posts/java/springcloud/sc07/</link>
        <pubDate>Thu, 11 Jun 2015 21:00:00 +0800</pubDate>
        
        <guid>http://localhost:1313/posts/java/springcloud/sc07/</guid>
        <description>&lt;h2 id=&#34;acid与隔离级别&#34;&gt;ACID与隔离级别
&lt;/h2&gt;&lt;p&gt;&lt;strong&gt;事务具有以下四种特征：&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;原子性（Atomicity）&lt;/p&gt;
&lt;p&gt;事务包含的所有操作要么全部成功，要么全部失败回滚。&lt;/p&gt;</description>
        </item>
        <item>
        <title>SpringCloud源码| ribbon源码</title>
        <link>http://localhost:1313/posts/java/springcloud/sc05/</link>
        <pubDate>Sat, 30 May 2015 21:00:00 +0800</pubDate>
        
        <guid>http://localhost:1313/posts/java/springcloud/sc05/</guid>
        <description>&lt;p&gt;ribbon的作用：一个服务部署多个实例时，负责负载均衡请求的组件&lt;/p&gt;
&lt;h3 id=&#34;ribbon重要组件&#34;&gt;ribbon重要组件
&lt;/h3&gt;&lt;p&gt;ILoadBalancer：负载均衡器，其中包含了IRule和IPing&lt;/p&gt;</description>
        </item>
        <item>
        <title>SpringCloud源码| hystrix源码</title>
        <link>http://localhost:1313/posts/java/springcloud/sc04/</link>
        <pubDate>Sat, 23 May 2015 21:00:00 +0800</pubDate>
        
        <guid>http://localhost:1313/posts/java/springcloud/sc04/</guid>
        <description>&lt;p&gt;hystrix在微服务中扮演重要作用，其实现了隔离、熔断、降级等重要组件&lt;/p&gt;
&lt;p&gt;但在spring cloud中，常与feign搭配起来使用。故本文仅包含其余feign整合后的相关源码。&lt;/p&gt;</description>
        </item>
        <item>
        <title>SpringCloud源码| feign源码</title>
        <link>http://localhost:1313/posts/java/springcloud/sc03/</link>
        <pubDate>Wed, 13 May 2015 14:09:48 +0800</pubDate>
        
        <guid>http://localhost:1313/posts/java/springcloud/sc03/</guid>
        <description>&lt;h3 id=&#34;feign核心组件&#34;&gt;feign核心组件
&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;Encoder和Decoder：编解码组件。SpringEncoder和ResponseEntityDecoder&lt;/li&gt;
&lt;li&gt;Contract：解析spring mvc相关组件。SpringMvcContract&lt;/li&gt;
&lt;li&gt;Feign.Builder：FeignClient的一个实例构造器，builder模式&lt;/li&gt;
&lt;li&gt;FeignClient：LoadBalancerFeignClient ，底层整合ribbon&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;feign的使用和自定义配置&lt;/p&gt;</description>
        </item>
        <item>
        <title>SpringCloud源码| eureka源码</title>
        <link>http://localhost:1313/posts/java/springcloud/sc02/</link>
        <pubDate>Fri, 13 Mar 2015 21:00:00 +0800</pubDate>
        
        <guid>http://localhost:1313/posts/java/springcloud/sc02/</guid>
        <description>&lt;h2 id=&#34;eureka-server启动流程&#34;&gt;eureka server启动流程
&lt;/h2&gt;&lt;p&gt;EurekaBootStrap#contextInitialized(ServletContextEvent)  方法进行初始化&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt; 1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 4
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 5
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 6
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 7
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 8
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 9
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;10
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;11
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;12
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;13
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;14
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;15
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;16
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;17
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;18
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;19
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;20
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;21
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;22
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;23
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;24
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;25
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;26
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;27
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;28
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;29
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;30
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;31
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;32
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;33
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;34
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;35
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;36
&lt;/span&gt;&lt;/code&gt;&lt;/pr</description>
        </item>
        <item>
        <title>SpringCloud源码| 从单体到微服务</title>
        <link>http://localhost:1313/posts/java/springcloud/sc01/</link>
        <pubDate>Fri, 12 Dec 2014 21:00:00 +0800</pubDate>
        
        <guid>http://localhost:1313/posts/java/springcloud/sc01/</guid>
        <description>&lt;h2 id=&#34;1代码重复问题&#34;&gt;1、代码重复问题
&lt;/h2&gt;&lt;p&gt;拆分成多个服务，通过网络请求不同的服务。代码不再耦合重复&lt;/p&gt;
&lt;h2 id=&#34;2多人协作效率问题&#34;&gt;2、多人协作效率问题
&lt;/h2&gt;&lt;p&gt;各种专注于自己的小范围即可，代码不会与其他服务冲突。测试上线不依赖其他服务&lt;/p&gt;</description>
        </item>
        <item>
        <title>并发源码|线程池原理</title>
        <link>http://localhost:1313/posts/java/juc/juc08/</link>
        <pubDate>Fri, 13 Jun 2014 21:00:00 +0800</pubDate>
        
        <guid>http://localhost:1313/posts/java/juc/juc08/</guid>
        <description>&lt;h2 id=&#34;线程池&#34;&gt;线程池
&lt;/h2&gt;&lt;p&gt;线程池的意义：频繁的创建和销毁线程，性能开销比较大。线程池创建一些线程，执行完任务后不立即销毁，可以等待去执行下一个任务&lt;/p&gt;</description>
        </item>
        <item>
        <title>并发源码|其他并发容器</title>
        <link>http://localhost:1313/posts/java/juc/juc07/</link>
        <pubDate>Sun, 27 Apr 2014 21:00:00 +0800</pubDate>
        
        <guid>http://localhost:1313/posts/java/juc/juc07/</guid>
        <description>&lt;h2 id=&#34;copyonwritearraylist&#34;&gt;CopyOnWriteArrayList
&lt;/h2&gt;&lt;p&gt;写时复制的并发Arraylist容器，底层使用锁来实现&lt;/p&gt;
&lt;p&gt;底层使用volatile标记array，保证并发修改后能立即可见。&lt;/p&gt;
&lt;p&gt;另外使用ReentrantLock在进行写操作时加锁&lt;/p&gt;</description>
        </item>
        <item>
        <title>并发源码|Hashmap死循环问题与ConcurrentHashmap</title>
        <link>http://localhost:1313/posts/java/juc/juc06/</link>
        <pubDate>Fri, 18 Apr 2014 11:00:00 +0800</pubDate>
        
        <guid>http://localhost:1313/posts/java/juc/juc06/</guid>
        <description>&lt;h2 id=&#34;jdk7hashmap死循环问题&#34;&gt;jdk7hashmap死循环问题
&lt;/h2&gt;&lt;p&gt;在多线程并发环境下。不应该用此容器，而应使用线程安全的容器如ConcurrentHashmap&lt;/p&gt;</description>
        </item>
        <item>
        <title>并发源码|并发常用组件</title>
        <link>http://localhost:1313/posts/java/juc/juc05/</link>
        <pubDate>Fri, 11 Apr 2014 21:00:00 +0800</pubDate>
        
        <guid>http://localhost:1313/posts/java/juc/juc05/</guid>
        <description>&lt;p&gt;CountDownLatch：同步等待多个线程完成任务的并发组件&lt;/p&gt;
&lt;p&gt;CyclicBarrier：将工作任务给多线程分而治之的并发组件，此组件比CountDownLatch可重复使用&lt;/p&gt;</description>
        </item>
        <item>
        <title>Hashmap源码</title>
        <link>http://localhost:1313/posts/java/jdk/jdk2/</link>
        <pubDate>Mon, 31 Mar 2014 21:00:00 +0800</pubDate>
        
        <guid>http://localhost:1313/posts/java/jdk/jdk2/</guid>
        <description>&lt;h1 id=&#34;hashmap&#34;&gt;Hashmap
&lt;/h1&gt;&lt;p&gt;&lt;img src=&#34;http://localhost:1313/posts/java/jdk/jdk2/03_hashmap%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84.png&#34;
	width=&#34;567&#34;
	height=&#34;627&#34;
	srcset=&#34;http://localhost:1313/posts/java/jdk/jdk2/03_hashmap%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84_hu16961457512706720457.png 480w, http://localhost:1313/posts/java/jdk/jdk2/03_hashmap%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84_hu11267825771882653803.png 1024w&#34;
	loading=&#34;lazy&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;90&#34;
		data-flex-basis=&#34;217px&#34;
	
&gt;&lt;/p&gt;
&lt;p&gt;对key进行hash，放到数组对应的位置 p = tab[i = (n - 1) &amp;amp; hash] 。i的位置为i = (n - 1) &amp;amp; hash&lt;/p&gt;</description>
        </item>
        <item>
        <title>并发源码|AQS、ReentratLock原理</title>
        <link>http://localhost:1313/posts/java/juc/juc04/</link>
        <pubDate>Wed, 19 Mar 2014 21:00:00 +0800</pubDate>
        
        <guid>http://localhost:1313/posts/java/juc/juc04/</guid>
        <description>&lt;h2 id=&#34;aqs原理&#34;&gt;AQS原理
&lt;/h2&gt;&lt;p&gt;底层使用如下组件&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt; 1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 4
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 5
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 6
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 7
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 8
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 9
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;10
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;11
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;kd&#34;&gt;private&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;kd&#34;&gt;volatile&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;int&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;state&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;//标识同步状态，第一次加锁时设置为1，若重入加锁，则state递增。释放锁时state递减，若state=0时将owner设置为null，并且使用LockSupport.unpark(s.thread);方法唤醒等待队列中的第一个线程&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;//其他线程来获取锁时，若失败，则加入等待队列(双向链表)，并且使用LockSupport.park(this);休眠此线程&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;kd&#34;&gt;private&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;kd&#34;&gt;transient&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;Thread&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;exclusiveOwnerThread&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;//标识当前线程所有者&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;//一个双向链表作为一个队列来使用，存放等待队列(保存待加锁的线程)。&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;//非公平锁：新来一个线程直接判断能不能加锁，若能加锁则直接加锁，不能加锁才放入等待队列&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;//公平锁：等待队列中的线程依次加锁，体现的“公平”的特点&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pr</description>
        </item>
        <item>
        <title>ArrayList和LinkedList集合源码</title>
        <link>http://localhost:1313/posts/java/jdk/jdk01/</link>
        <pubDate>Thu, 13 Mar 2014 21:00:00 +0800</pubDate>
        
        <guid>http://localhost:1313/posts/java/jdk/jdk01/</guid>
        <description>&lt;h2 id=&#34;arraylist&#34;&gt;ArrayList
&lt;/h2&gt;&lt;p&gt;底层使用数组实现，适合插入较少&lt;/p&gt;
&lt;p&gt;适合随机查找O(1)，原理：地址连续&lt;/p&gt;
&lt;p&gt;扩容O(n) 源码中int newCapacity = oldCapacity + (oldCapacity &amp;raquo; 1);即扩容为原来的1.5倍&lt;/p&gt;</description>
        </item>
        <item>
        <title>并发源码|Atomicxxx原理</title>
        <link>http://localhost:1313/posts/java/juc/juc02/</link>
        <pubDate>Tue, 11 Mar 2014 21:00:00 +0800</pubDate>
        
        <guid>http://localhost:1313/posts/java/juc/juc02/</guid>
        <description>&lt;h2 id=&#34;atomicxxx原子类底层的一些原理&#34;&gt;AtomicXxx原子类底层的一些原理
&lt;/h2&gt;&lt;p&gt;AtomicLong、AtomicBoolean、AtomicReference、LongAdder等&lt;/p&gt;</description>
        </item>
        <item>
        <title>并发源码|synchronized、wait与notify</title>
        <link>http://localhost:1313/posts/java/juc/juc02/</link>
        <pubDate>Sat, 08 Mar 2014 21:00:00 +0800</pubDate>
        
        <guid>http://localhost:1313/posts/java/juc/juc02/</guid>
        <description>&lt;h2 id=&#34;synchronized的底层原理&#34;&gt;synchronized的底层原理
&lt;/h2&gt;&lt;p&gt;跟jvm及monitor有关。&lt;/p&gt;
&lt;p&gt;如果用到了synchronized关键字，在底层编译后的jvm指令中，会有monitorenter和monitorexit两个指令&lt;/p&gt;</description>
        </item>
        <item>
        <title>并发源码| JMM与volatile</title>
        <link>http://localhost:1313/posts/java/juc/juc01/</link>
        <pubDate>Sat, 01 Mar 2014 21:00:00 +0800</pubDate>
        
        <guid>http://localhost:1313/posts/java/juc/juc01/</guid>
        <description>&lt;p&gt;主内存的数据会被加载到cpu本地缓存里去，cpu后面会读写自己的缓存&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;http://localhost:1313/posts/java/juc/juc01/02_cpu%E7%BC%93%E5%AD%98%E6%A8%A1%E5%9E%8B.png&#34;
	width=&#34;692&#34;
	height=&#34;484&#34;
	srcset=&#34;http://localhost:1313/posts/java/juc/juc01/02_cpu%E7%BC%93%E5%AD%98%E6%A8%A1%E5%9E%8B_hu14727855551246196521.png 480w, http://localhost:1313/posts/java/juc/juc01/02_cpu%E7%BC%93%E5%AD%98%E6%A8%A1%E5%9E%8B_hu7191765926765202319.png 1024w&#34;
	loading=&#34;lazy&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;142&#34;
		data-flex-basis=&#34;343px&#34;
	
&gt;&lt;/p&gt;
&lt;p&gt;缓存模型下的并发问题&lt;/p&gt;</description>
        </item>
        <item>
        <title>Archives</title>
        <link>http://localhost:1313/archives/</link>
        <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
        
        <guid>http://localhost:1313/archives/</guid>
        <description></description>
        </item>
        <item>
        <title>Search</title>
        <link>http://localhost:1313/search/</link>
        <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
        
        <guid>http://localhost:1313/search/</guid>
        <description></description>
        </item>
        
    </channel>
</rss>
