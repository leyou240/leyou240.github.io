<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title></title>
    <link>https://leyou240.github.io/</link>
    <description>Recent content on </description>
    <generator>Hugo -- gohugo.io</generator>
    <lastBuildDate>Sun, 13 Dec 2020 22:00:00 +0800</lastBuildDate><atom:link href="https://leyou240.github.io/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>nacos客户端是如何进行服务发现的？</title>
      <link>https://leyou240.github.io/post/sca_02_%E5%AE%A2%E6%88%B7%E7%AB%AF%E6%98%AF%E5%A6%82%E4%BD%95%E8%BF%9B%E8%A1%8C%E6%9C%8D%E5%8A%A1%E5%8F%91%E7%8E%B0%E7%9A%84/</link>
      <pubDate>Sun, 13 Dec 2020 22:00:00 +0800</pubDate>
      
      <guid>https://leyou240.github.io/post/sca_02_%E5%AE%A2%E6%88%B7%E7%AB%AF%E6%98%AF%E5%A6%82%E4%BD%95%E8%BF%9B%E8%A1%8C%E6%9C%8D%E5%8A%A1%E5%8F%91%E7%8E%B0%E7%9A%84/</guid>
      <description>本来自己写了一遍，但从网上找到的一个源码分析图。觉得比自己总结的好且更为细致，就直接放过来了。一图胜千言。
https://xie.infoq.cn/article/d342a914b8754dd52f5709b43
服务心跳、服务剔除 这些都与eureka类似。定时访问对应的接口即可
与eureka不太一样的是，服务同步如果是ephemeral则异步更新，达到最终一致性 AP。如果是持久化的注册，则使用raft协议同步 CP。
nacos1.x版本使用http进行通信、2.x版本做了重构改为使用grpc进行内部节点以及对外通信，目前为beta版。</description>
    </item>
    
    <item>
      <title>nacos注册中心初始化</title>
      <link>https://leyou240.github.io/post/sca_01_nacos%E6%B3%A8%E5%86%8C%E4%B8%AD%E5%BF%83%E5%88%9D%E5%A7%8B%E5%8C%96/</link>
      <pubDate>Sun, 13 Dec 2020 21:00:00 +0800</pubDate>
      
      <guid>https://leyou240.github.io/post/sca_01_nacos%E6%B3%A8%E5%86%8C%E4%B8%AD%E5%BF%83%E5%88%9D%E5%A7%8B%E5%8C%96/</guid>
      <description>注册中心启动类就一个springboot应用，看不出什么东西
@EnableScheduling @SpringBootApplication(scanBasePackages = {&amp;#34;com.alibaba.nacos.naming&amp;#34;, &amp;#34;com.alibaba.nacos.core&amp;#34;}) public class NamingApp { public static void main(String[] args) { SpringApplication.run(NamingApp.class, args); } } 通过官方文档已经一些分析，得知底层是用了raft协议来做集群同步
//PersistentConsistencyServiceDelegateImpl private BasePersistentServiceProcessor createNewPersistentServiceProcessor(ProtocolManager protocolManager, ClusterVersionJudgement versionJudgement) throws Exception { //根据相关配置，判断到底是standlone还是raft模式  final BasePersistentServiceProcessor processor = EnvUtil.getStandaloneMode() ? new StandalonePersistentServiceProcessor(versionJudgement) : new PersistentServiceProcessor(protocolManager, versionJudgement); //调用基类的方法  processor.afterConstruct(); return processor; } 具体的代码逻辑
//PersistentServiceProcessor @Override public void afterConstruct() { super.afterConstruct(); this.protocol.addRequestProcessors(Collections.singletonList(this)); //监听元数据的状态  this.protocol.protocolMetaData() .subscribe(Constants.NAMING_PERSISTENT_SERVICE_GROUP, MetadataKey.LEADER_META_DATA, (o, arg) -&amp;gt; hasLeader = StringUtils.</description>
    </item>
    
    <item>
      <title>ArrayList和LinkedList集合源码</title>
      <link>https://leyou240.github.io/post/jdk_01_arraylist%E5%92%8Clinkedlist%E9%9B%86%E5%90%88%E6%BA%90%E7%A0%81/</link>
      <pubDate>Fri, 13 Dec 2019 21:00:00 +0800</pubDate>
      
      <guid>https://leyou240.github.io/post/jdk_01_arraylist%E5%92%8Clinkedlist%E9%9B%86%E5%90%88%E6%BA%90%E7%A0%81/</guid>
      <description>ArrayList 底层使用数组实现，适合插入较少
适合随机查找O(1)，原理：地址连续
扩容O(n) 源码中int newCapacity = oldCapacity + (oldCapacity &amp;raquo; 1);即扩容为原来的1.5倍
插入O(n)，尾插为O(1)，最坏O(n)，平均即为 O(n)
LinkedList 底层使用(双向)链表，适合插入较多
随机查找O(n)
头尾插入O(1)
使用场景 ArrayList：一般场景，都是用ArrayList来代表一个集合，只要别频繁的往里面插入和灌入大量的元素就可以了，遍历，或者随机查，都可以。
LinkedList：适合，频繁的在list中插入和删除某个元素，然后尤其是LinkedList他其实是可以当做队列来用的，这个东西的话呢，我们后面看源码的时候，可以来看一下，先进先出，在list尾部怼进去一个元素，从头部拿出来一个元素。如果要在内存里实现一个基本的队列的话，可以用LinkedList</description>
    </item>
    
    <item>
      <title>Hashmap源码</title>
      <link>https://leyou240.github.io/post/jdk_02_hashmap%E6%BA%90%E7%A0%81/</link>
      <pubDate>Fri, 13 Dec 2019 21:00:00 +0800</pubDate>
      
      <guid>https://leyou240.github.io/post/jdk_02_hashmap%E6%BA%90%E7%A0%81/</guid>
      <description>Hashmap 对key进行hash，放到数组对应的位置 p = tab[i = (n - 1) &amp;amp; hash] 。i的位置为i = (n - 1) &amp;amp; hash
从JDK8以后结构为：数组 + 链表 + 红黑树，从原来的hash冲突时由纯链表变为，当链表长度大于8以后变为红黑树。
fail-fast机制是什么东西，这个在开发的时候是一个比较常见的异常，ConcurrentModificationException
核心变量 static final int DEFAULT_INITIAL_CAPACITY = 1 &amp;lt;&amp;lt; 4; // aka 16 //应该是数组的默认的初始大小，是16，这个跟ArrayList是不一样的，初始的默认大小是10 //这个数组的大小，一般会自己手动指定一下，就跟你用ArrayList一样，你需要去预估一下你的这个数据结构里会放多少key-value对，指定的大一些，避免频繁的扩容 static final float DEFAULT_LOAD_FACTOR = 0.75f; //默认的负载因子，如果你在数组里的元素的个数达到了数组大小（16） * 负载因子（0.75f），默认是达到12个元素，就会进行数组的扩容 static class Node&amp;lt;K,V&amp;gt; implements Map.Entry&amp;lt;K,V&amp;gt; { final int hash; final K key; V value; Node&amp;lt;K,V&amp;gt; next; } //这是一个很关键的内部类，他其实是代表了一个key-value对，里面包含了key的hash值，key，value，还有就是可以有一个next的指针，指向下一个Node，也就是指向单向链表中的下一个节点 //通过这个next指针，就可以形成一个链表 transient Node&amp;lt;K,V&amp;gt;[] table; //这个是什么东东？Node&amp;lt;K, V&amp;gt;[]，这个数组就是所谓的map里的核心数据结构的数组，数组的元素就可以看到是Node类型的，天然就可以挂成一个链表，单向链表，Node里面只有一个next指针 transient int size; //这个size代表的是就是当前hashmap中有多少个key-value对，如果这个数量达到了指定大小 * 负载因子，那么就会进行数组的扩容 int threshold; //这个值，其实就是说capacity（就是默认的数组的大小），就是说capacity * loadFactory，就是threshold，如果size达到了threshold，那么就会进行数组的扩容，如果面试这么回答，你就是在打自己的脸。扩容的时机是size&amp;gt;threshold  //负载因子，默认值，threshold，扩容，扩容，rehash的算法，JDK 1.</description>
    </item>
    
    <item>
      <title>SpringCloud源码| eureka源码</title>
      <link>https://leyou240.github.io/post/sc_eureka/</link>
      <pubDate>Fri, 13 Dec 2019 21:00:00 +0800</pubDate>
      
      <guid>https://leyou240.github.io/post/sc_eureka/</guid>
      <description>eureka server启动流程 EurekaBootStrap#contextInitialized(ServletContextEvent) 方法进行初始化
@Override public void contextInitialized(ServletContextEvent event) { try { //1、初始化eureka相关环境  initEurekaEnvironment(); //2、初始化eureka的serverContext  initEurekaServerContext(); ServletContext sc = event.getServletContext(); sc.setAttribute(EurekaServerContext.class.getName(), serverContext); } catch (Throwable e) { logger.error(&amp;#34;Cannot bootstrap eureka server :&amp;#34;, e); throw new RuntimeException(&amp;#34;Cannot bootstrap eureka server :&amp;#34;, e); } } /** * Users can override to initialize the environment themselves. */ protected void initEurekaEnvironment() throws Exception { logger.info(&amp;#34;Setting the eureka configuration..&amp;#34;); AbstractConfiguration configInstance = ConfigurationManager.getConfigInstance(); String dataCenter = configInstance.</description>
    </item>
    
    <item>
      <title>SpringCloud源码| feign源码</title>
      <link>https://leyou240.github.io/post/sc_feign/</link>
      <pubDate>Fri, 13 Dec 2019 21:00:00 +0800</pubDate>
      
      <guid>https://leyou240.github.io/post/sc_feign/</guid>
      <description>feign核心组件  Encoder和Decoder：编解码组件。SpringEncoder和ResponseEntityDecoder Contract：解析spring mvc相关组件。SpringMvcContract Feign.Builder：FeignClient的一个实例构造器，builder模式 FeignClient：LoadBalancerFeignClient ，底层整合ribbon  feign的使用和自定义配置
@FeignClient(name = “ServiceA”, configuration = MyConfiguration.class) public interface ServiceAClient { } public class MyConfiguration { @Bean public RequestInterceptor requestInterceptor() { return new MyRequestInterceptor(); } } feign的入口  @EnableFeignClients，使用FeignClientsRegistrar扫描包下面的所有FeignClient。 使用SpringMvcContract解析相关spring mvc注解，生成LoadBalancerFeignClient动态代理 FeignClient底层使用ribbon进行负载均衡，调用对应的远程服务  @Import(FeignClientsRegistrar.class) public @interface EnableFeignClients { //省略 } //FeignClientsRegistrar类的重要方法 	@Override public void registerBeanDefinitions(AnnotationMetadata metadata, BeanDefinitionRegistry registry) { //注册bean 	registerDefaultConfiguration(metadata, registry); //扫描所有@FeignClient，解析注解中的所有属性。注册对应的FeignClient 	registerFeignClients(metadata, registry); } private void registerDefaultConfiguration(AnnotationMetadata metadata, BeanDefinitionRegistry registry) { Map&amp;lt;String, Object&amp;gt; defaultAttrs = metadata .</description>
    </item>
    
    <item>
      <title>SpringCloud源码| hystrix源码</title>
      <link>https://leyou240.github.io/post/sc_hystrix/</link>
      <pubDate>Fri, 13 Dec 2019 21:00:00 +0800</pubDate>
      
      <guid>https://leyou240.github.io/post/sc_hystrix/</guid>
      <description>hystrix在微服务中扮演重要作用，其实现了隔离、熔断、降级等重要组件
但在spring cloud中，常与feign搭配起来使用。故本文仅包含其余feign整合后的相关源码。
hystrix资源隔离 共有两种：线程池的资源隔离，信号量的资源隔离
线程池：适合绝大多数的场景，99%的，线程池，对依赖服务的网络请求的调用和访问，timeout这种问题
信号量：适合对内部的一些比较复杂的业务逻辑的访问，但是像这种访问，系统内部的代码，其实不涉及任何的网络请求，那么只要做信号量的普通限流就可以了，因为不需要去捕获timeout类似的问题。但算法+数据结构的效率不是太高，并发量突然太高，因为这里稍微耗时一些，导致很多线程卡在这里的话，不太好，所以进行一个基本的资源隔离和访问，避免内部复杂的低效率的代码，导致大量的线程被hang住
feign集成hystrix以后，HystrixFeign.Builder则被替换为HystrixFeign.Builder。以支持hystrix相关组件
//ReflectiveFeign 类中 public &amp;lt;T&amp;gt; T newInstance(Target&amp;lt;T&amp;gt; target) { Map&amp;lt;String, MethodHandler&amp;gt; nameToHandler = targetToHandlersByName.apply(target); //对应FeignClient中的方法，及代理类  Map&amp;lt;Method, MethodHandler&amp;gt; methodToHandler = new LinkedHashMap&amp;lt;Method, MethodHandler&amp;gt;(); List&amp;lt;DefaultMethodHandler&amp;gt; defaultMethodHandlers = new LinkedList&amp;lt;DefaultMethodHandler&amp;gt;(); for (Method method : target.type().getMethods()) { if (method.getDeclaringClass() == Object.class) { continue; } else if (Util.isDefault(method)) { DefaultMethodHandler handler = new DefaultMethodHandler(method); defaultMethodHandlers.add(handler); methodToHandler.put(method, handler); } else { methodToHandler.put(method, nameToHandler.get(Feign.configKey(target.type(), method))); } } //调用HystrixFeign.</description>
    </item>
    
    <item>
      <title>SpringCloud源码| ribbon源码</title>
      <link>https://leyou240.github.io/post/sc_ribbon/</link>
      <pubDate>Fri, 13 Dec 2019 21:00:00 +0800</pubDate>
      
      <guid>https://leyou240.github.io/post/sc_ribbon/</guid>
      <description>ribbon的作用：一个服务部署多个实例时，负责负载均衡请求的组件
ribbon重要组件 ILoadBalancer：负载均衡器，其中包含了IRule和IPing
IRule：负责负载均衡选择服务的规则
IPing：定时ping服务器，判断其是否存活
public class MyConfiguration { @Bean public IRule getRule() { return new MyRule(); } @Bean public IPing getPing() { return new MyPing(); } } @RibbonClient(name = &amp;#34;ServiceB&amp;#34;, configuration = MyConfiguration.class) public class ServiceBConfiguration { } ribbon的入口 @LoadBalanced将将一个RestTemplate标志为底层采用LoadBalancerClient来执行实际的http请求，支持负载均衡。
org.springframework.cloud.client.loadbalancer.LoadBalancerAutoConfiguration中有相关的bean注册。LoadBalancerRequestFactory、LoadBalancerInterceptor、RestTemplateCustomizer等等
使用RestTemplateCustomizer对每个restTemplate，使用LoadBalancerInterceptor进行定制。
@Bean @ConditionalOnMissingBean public LoadBalancerRequestFactory loadBalancerRequestFactory( LoadBalancerClient loadBalancerClient) { return new LoadBalancerRequestFactory(loadBalancerClient, this.transformers); } @Configuration(proxyBeanMethods = false) @ConditionalOnMissingClass(&amp;#34;org.springframework.retry.support.RetryTemplate&amp;#34;) static class LoadBalancerInterceptorConfig { //配置拦截器 	@Bean public LoadBalancerInterceptor loadBalancerInterceptor( LoadBalancerClient loadBalancerClient, LoadBalancerRequestFactory requestFactory) { return new LoadBalancerInterceptor(loadBalancerClient, requestFactory); } //RestTemplate定制化，使用LoadBalancerInterceptor 	@Bean @ConditionalOnMissingBean public RestTemplateCustomizer restTemplateCustomizer( final LoadBalancerInterceptor loadBalancerInterceptor) { return restTemplate -&amp;gt; { List&amp;lt;ClientHttpRequestInterceptor&amp;gt; list = new ArrayList&amp;lt;&amp;gt;( restTemplate.</description>
    </item>
    
    <item>
      <title>SpringCloud源码| zuul源码</title>
      <link>https://leyou240.github.io/post/sc_zuul/</link>
      <pubDate>Fri, 13 Dec 2019 21:00:00 +0800</pubDate>
      
      <guid>https://leyou240.github.io/post/sc_zuul/</guid>
      <description>zuul主要使用责任链设计模式
其中有如下过滤器
pre过滤器
 -3：ServletDetectionFilter -2：Servlet30WrapperFilter -1：FromBodyWrapperFilter 1：DebugFilter 5：PreDecorationFilter  routing过滤器
 10：RibbonRoutingFilter 100：SimpleHostRoutingFilter 500：SendForwardFilter  post过滤器
 0：SendErrorFilter 900：LocationRewriteFilter 1000：SendResponseFilter  @EnableZuulProxy为spring cloud中zuul的入口
@EnableCircuitBreaker @Target(ElementType.TYPE) @Retention(RetentionPolicy.RUNTIME) @Import(ZuulProxyMarkerConfiguration.class) public @interface EnableZuulProxy { } 然后在ZuulProxyAutoConfiguration进行相关类的注册
经过断点调试，核心逻辑为此方法ZuulServlet#service
@Override public void service(javax.servlet.ServletRequest servletRequest, javax.servlet.ServletResponse servletResponse) throws ServletException, IOException { try { init((HttpServletRequest) servletRequest, (HttpServletResponse) servletResponse); // Marks this request as having passed through the &amp;#34;Zuul engine&amp;#34;, as opposed to servlets  // explicitly bound in web.</description>
    </item>
    
    <item>
      <title>事务隔离级别，MVCC与国内主流分布式事务方案</title>
      <link>https://leyou240.github.io/post/sc_%E5%88%86%E5%B8%83%E5%BC%8F%E4%BA%8B%E5%8A%A1/</link>
      <pubDate>Fri, 13 Dec 2019 21:00:00 +0800</pubDate>
      
      <guid>https://leyou240.github.io/post/sc_%E5%88%86%E5%B8%83%E5%BC%8F%E4%BA%8B%E5%8A%A1/</guid>
      <description>ACID与隔离级别 事务具有以下四种特征：
  原子性（Atomicity）
事务包含的所有操作要么全部成功，要么全部失败回滚。
  一致性（Consistency）
事务必须使数据库从一个一致性状态变换到另一个一致性状态，也就是说一个事务执行之前和执行之后都必须处于一致性状态。 拿转账来说，假设用户A和用户B两者的钱加起来一共是5000，那么不管A和B之间如何转账，转几次账，事务结束后两个用户的钱相加起来应该还得是5000，这就是事务的一致性。
  隔离性（Isolation）
不同事务并发执行操作相同数据时，每个事务都有各自完整的数据空间，即一个事务内所操作使用的数据与其他并发执行的各事务不互相干扰。
  持久性（Durability）
一个事务一旦提交，对数据库中数据状态变更应该是永久保存下来，即使发生系统崩溃或宕机，也一定能恢复到事务成功结束时的状态。
  隔离级别
   隔离级别 脏读 不可重复读 幻读     读未提交 存在 存在 存在   读已提交 不存在 存在 存在   可重复读 不存在 不存在 存在   串行化 不存在 不存在 不存在    下面用口语化对各个隔离级别进行解释。
假设，数据库中有这样一个数据，id=1 name=张三
读未提交 事务1中，将张三修改为李四，但未提交
事务2中，就读到了id=1 name=李四
此为读未提交，存在脏读
读已提交 事务1中，将张三修改为李四
事务2中，第一次读到了id=1 name=张三</description>
    </item>
    
    <item>
      <title>并发源码| JMM与volatile</title>
      <link>https://leyou240.github.io/post/juc01_java%E5%B9%B6%E5%8F%91_jmm%E4%B8%8Evolatile/</link>
      <pubDate>Fri, 13 Dec 2019 21:00:00 +0800</pubDate>
      
      <guid>https://leyou240.github.io/post/juc01_java%E5%B9%B6%E5%8F%91_jmm%E4%B8%8Evolatile/</guid>
      <description>主内存的数据会被加载到cpu本地缓存里去，cpu后面会读写自己的缓存
缓存模型下的并发问题
java内存模型
read（从主存读取），load（将主存读取到的值写入工作内存），use（从工作内存读取数据来计算），assign（将计算好的值重新赋值到工作内存中），store（将工作内存数据写入主存），write（将store过去的变量值赋值给主存中的变量）
volatile保持内存可见的原理 就是说一定会强制保证说assign之后，就立马执行store + write，刷回到主内存里去。并且将其他工作内存中的状态改为过期
volatile无法保持原子性的原理 2个线程同时use后，线程1assign了以后，刷回了主内存。但线程2已经use了，不需要在从内存中加载。此时使用的旧的值。
底层使用cpu的MESI缓存一致性协议，强制刷主内存，过期其他线程中的工作内存
volatile内存屏障及happen before原则 在被volatile标记的字段读写前后都设置内存屏障，防止指令重排。
指令重排的happen before原则，是给开发JVM的人看的。
大概有几个原则
程序次序规则：一个线程内，按照代码顺序，书写在前面的操作先行发生于书写在后面的操作
lock规则：一个unLock操作先行发生于后面对同一个锁的lock操作
volatile变量规则：必须保证是先写，再读
volatile的实际用途和场景 double check的单例模式，使用volatile防止指令重排
instance=new Singleton() 分为3步
1、volatile保证并发可见性
2、synchronized保证有序性
3、double check保证对象被正常创建（类加载创建过程多线程问题）
public class Singleton { private static volatile Singleton instance; private Singleton() { } public Singleton getInstance(){ if (instance == null) { synchronized (Singleton.class) { if (instance == null) { instance=new Singleton(); } } } return instance; } } </description>
    </item>
    
    <item>
      <title>并发源码|AQS、ReentratLock原理</title>
      <link>https://leyou240.github.io/post/juc04_reentrantlock%E4%B8%8Eaqs/</link>
      <pubDate>Fri, 13 Dec 2019 21:00:00 +0800</pubDate>
      
      <guid>https://leyou240.github.io/post/juc04_reentrantlock%E4%B8%8Eaqs/</guid>
      <description>AQS原理 底层使用如下组件
private volatile int state; //标识同步状态，第一次加锁时设置为1，若重入加锁，则state递增。释放锁时state递减，若state=0时将owner设置为null，并且使用LockSupport.unpark(s.thread);方法唤醒等待队列中的第一个线程 //其他线程来获取锁时，若失败，则加入等待队列(双向链表)，并且使用LockSupport.park(this);休眠此线程  private transient Thread exclusiveOwnerThread; //标识当前线程所有者  //一个双向链表作为一个队列来使用，存放等待队列(保存待加锁的线程)。  //非公平锁：新来一个线程直接判断能不能加锁，若能加锁则直接加锁，不能加锁才放入等待队列 //公平锁：等待队列中的线程依次加锁，体现的“公平”的特点 ReentratLock 多个线程争抢锁
尝试加锁，public boolean tryLock(long timeout, TimeUnit unit) 如果加锁不成功，则等待一段时间不成功则设置当前线程waitstate为SIGNAL状态，并持续重试，若最终超过了等待时间则从队列中移除
ReentrantReadWriteLock读写锁 使用state的高低16位(因为int是32位)来标识读锁(高16位)和写锁(低16位)，非0表示已经加过锁了
读锁，可以同时被多个线程同时持有。读请求可以并发起来
写锁，则是互斥的
Condition 可重入锁可以创建Condition，主要有2个方法await与notify/notifyAll。 await等待唤醒，await与notify/notifyAll唤醒对应conditionawait的线程。
Condition.await()原理：将自己加入condition等待队列、释放锁、挂起自己
如果在加锁等待队列里有人阻塞，会有unpark的过程，唤醒加锁等待队列中的队头元素的那个过程
signal唤醒的过程，大概的意思，就是把condition等待队列中的元素，转化为一个加锁等待队列中的元素
锁优化 TODO：</description>
    </item>
    
    <item>
      <title>并发源码|Atomicxxx原理</title>
      <link>https://leyou240.github.io/post/juc03_java%E5%B9%B6%E5%8F%91_atomicxxx%E5%8E%9F%E7%90%86/</link>
      <pubDate>Fri, 13 Dec 2019 21:00:00 +0800</pubDate>
      
      <guid>https://leyou240.github.io/post/juc03_java%E5%B9%B6%E5%8F%91_atomicxxx%E5%8E%9F%E7%90%86/</guid>
      <description>AtomicInteger原子类底层的一些原理 AtomicLong、AtomicBoolean、AtomicReference、LongAdder等
都是无锁化或者叫乐观锁，判断此时此刻是否是某个值，如果是则修改，不是则重新查询一个最新的值，再次执行判断。这个操作叫CAS，compare and set(swap jdk8及以后)
Atomic原子类底层核心的原理就是CAS，无锁化，乐观锁，每次尝试修改的时候，就对比一下，有没有人修改过这个值，没有人修改，自己就修改，如果有人修改过，就重新查出来最新的值，再次重复那个过程
源码：
（1）变量的offset，volatile value 使其值对其他线程可见
private static final long valueOffset; static { try { valueOffset = unsafe.objectFieldOffset (AtomicInteger.class.getDeclaredField(&amp;#34;value&amp;#34;)); } catch (Exception ex) { throw new Error(ex); } } private volatile int value; （2）Unsafe：核心类，负责执行CAS操作
public final int getAndAddInt(Object o, long offset, int delta) { int v; do { v = getIntVolatile(o, offset); } while (!compareAndSwapInt(o, offset, v, v + delta)); return v; } （3）API接口：Atomic原子类的各种使用方式
最底层使用c代码，发送cpu指令，确保CAS操作绝对原子(通过指令来锁掉某一小块内存，并且保证只有一个线程在同一时间可以对此块内存数据做CAS操作)。</description>
    </item>
    
    <item>
      <title>并发源码|Hashmap死循环问题与ConcurrentHashmap</title>
      <link>https://leyou240.github.io/post/juc07_hashmap%E6%AD%BB%E5%BE%AA%E7%8E%AF%E4%BB%A5%E5%8F%8Aconcurrenthashmap/</link>
      <pubDate>Fri, 13 Dec 2019 21:00:00 +0800</pubDate>
      
      <guid>https://leyou240.github.io/post/juc07_hashmap%E6%AD%BB%E5%BE%AA%E7%8E%AF%E4%BB%A5%E5%8F%8Aconcurrenthashmap/</guid>
      <description>jdk7hashmap死循环问题 在多线程并发环境下。不应该用此容器，而应使用线程安全的容器如ConcurrentHashmap
其死循环主要是扩容的时候resize方法内调用的transfer方法导致。
e.next = newTable[i]; newTable[i] = e; 如果两个线程正在处理同一个节点e，那么第一个线程正常执行，但是第二个线程设置e.next=e，因为第一个线程已经将newTable[i]设置为e。节点e现在指向它自己，当调用get（Object）时，它将进入一个无限循环。无限循环则会导致cpu100%，另外因为节点形成了环形，后面的元素无法访问到导致数据丢失
而java8中，resize的时候保持了节点的顺序。但同样会有数据丢失的问题
void transfer(Entry[] newTable) { Entry[] src = table; int newCapacity = newTable.length; for (int j = 0; j &amp;lt; src.length; j++) { Entry&amp;lt;K,V&amp;gt; e = src[j]; if (e != null) { src[j] = null; do { Entry&amp;lt;K,V&amp;gt; next = e.next; int i = indexFor(e.hash, newCapacity); e.next = newTable[i]; newTable[i] = e; e = next; } while (e != null); } } } jdk7与jdk8关于Hashmap的主要区别</description>
    </item>
    
    <item>
      <title>并发源码|synchronized、wait与notify</title>
      <link>https://leyou240.github.io/post/juc02_java%E5%B9%B6%E5%8F%91_synchronizedwait%E4%B8%8Enotify/</link>
      <pubDate>Fri, 13 Dec 2019 21:00:00 +0800</pubDate>
      
      <guid>https://leyou240.github.io/post/juc02_java%E5%B9%B6%E5%8F%91_synchronizedwait%E4%B8%8Enotify/</guid>
      <description>synchronized的底层原理 跟jvm及monitor有关。
如果用到了synchronized关键字，在底层编译后的jvm指令中，会有monitorenter和monitorexit两个指令
每个对象都是有个关联的monitor对象，即对象的Mark Word。里面有个计数器i，一个线程获取到锁以后i++，并且将锁对象设置为当前线程。释放锁时候i&amp;ndash;，若i为0 表示完全释放锁，将monitor的锁对象设为null
这个monitor的锁是支持重入加锁的，什么意思呢，好比下面的代码片段
synchronized(myObject) { // 一大堆的代码  synchronized(myObject) { // 一大堆的代码  } } 如果一个线程第一次synchronized那里，获取到了myObject对象的monitor的锁，计数器加1，然后第二次synchronized那里，会再次获取myObject对象的monitor的锁，这个就是重入加锁了，然后计数器会再次加1，变成2
这个时候，其他的线程在第一次synchronized那里，会发现说myObject对象的monitor锁的计数器是大于0的，意味着被别人加锁了，然后此时线程就会进入block阻塞状态，什么都干不了，就是等着获取锁
接着如果出了synchronized修饰的代码片段的范围，就会有一个monitorexit的指令，在底层。此时获取锁的线程就会对那个对象的monitor的计数器减1，如果有多次重入加锁就会对应多次减1，直到最后，计数器是0
然后后面block住阻塞的线程，会再次尝试获取锁，但是只有一个线程可以获取到锁
block以后，将block的线程加入wait set等待其他线程完成执行
wait与sleep的区别 前者释放锁，后者不释放锁
wait()，必须是有人notify唤醒他
wait(timeout)，阻塞一段时间，然后自己唤醒，继续争抢锁
wait与notify，必须在synchronized代码块中使用，因为必须是拥有monitor lock的线程才可以执行wait与notify操作
因此wait与notify，必须与synchornized一起，对同一个对象进行使用，这样他们对应的monitor才是一样的
notify()与notifyall()：前者就唤醒block状态的一个线程，后者唤醒block状态的所有线程</description>
    </item>
    
    <item>
      <title>并发源码|其他并发容器</title>
      <link>https://leyou240.github.io/post/juc08_%E5%85%B6%E4%BB%96%E5%B9%B6%E5%8F%91%E5%AE%B9%E5%99%A8/</link>
      <pubDate>Fri, 13 Dec 2019 21:00:00 +0800</pubDate>
      
      <guid>https://leyou240.github.io/post/juc08_%E5%85%B6%E4%BB%96%E5%B9%B6%E5%8F%91%E5%AE%B9%E5%99%A8/</guid>
      <description>CopyOnWriteArrayList 写时复制的并发Arraylist容器，底层使用锁来实现
底层使用volatile标记array，保证并发修改后能立即可见。
另外使用ReentrantLock在进行写操作时加锁
/** The array, accessed only via getArray/setArray. */ private transient volatile Object[] array; /** The lock protecting all mutators */ final transient ReentrantLock lock = new ReentrantLock(); 所有的读操作（get,迭代器,contains)都是读的array快照，弱一致性模型
优点：线程安全，读写不互斥
缺点：若一致性，每次修改都要新建一个数组。空间浪费大，增加gc压力
ConcurrentLinkedQueue 无界队列，底层使用单向链表实现，无大小限制。所有的指针操作都是基于CAS，没成功则进入下次循环直到成功。
不停的往此队列插入数据，可能会导致内存溢出。
此容器使用CAS保证并发安全，但size是弱一致性的
LinkedBlockingQueue 有界队列，底层使用单向链表实现，有大小限制，超过了限制，往队列里插入数据就会阻塞住。可以限制内存队列的大小，避免内存无限制的增长，最后撑爆内存
底层使用2个锁提高并发能力：take锁与put锁，以及各自的Condition。如下图所示
take的时候，若为空则阻塞等待，容器非空时再take数据
put的时候，若满则阻塞等待，容器不满再put数据
/** Current number of elements */ private final AtomicInteger count = new AtomicInteger(); /** Lock held by take, poll, etc */ private final ReentrantLock takeLock = new ReentrantLock(); /** Wait queue for waiting takes */ private final Condition notEmpty = takeLock.</description>
    </item>
    
    <item>
      <title>并发源码|并发常用组件</title>
      <link>https://leyou240.github.io/post/juc06_%E5%B9%B6%E5%8F%91%E5%B8%B8%E7%94%A8%E7%BB%84%E4%BB%B6/</link>
      <pubDate>Fri, 13 Dec 2019 21:00:00 +0800</pubDate>
      
      <guid>https://leyou240.github.io/post/juc06_%E5%B9%B6%E5%8F%91%E5%B8%B8%E7%94%A8%E7%BB%84%E4%BB%B6/</guid>
      <description>CountDownLatch：同步等待多个线程完成任务的并发组件
CyclicBarrier：将工作任务给多线程分而治之的并发组件，此组件比CountDownLatch可重复使用
案例实战：api服务中对多个接口并发调用后统一合并返回数据，可使用CountDownLatch或者CyclicBarrier并行请求多个接口，全部完成后再统一返回给调用方。用此方法可极大降低请求时间。
Semaphore：等待指定数量的线程完成任务的并发组件。此组件设置一个指定的数量i，可以有&amp;gt;=i个线程来并发执行。一旦完成了i个任务后，就可以执行接下来的方法了。</description>
    </item>
    
    <item>
      <title>并发源码|线程池原理</title>
      <link>https://leyou240.github.io/post/juc09_%E7%BA%BF%E7%A8%8B%E6%B1%A0/</link>
      <pubDate>Fri, 13 Dec 2019 21:00:00 +0800</pubDate>
      
      <guid>https://leyou240.github.io/post/juc09_%E7%BA%BF%E7%A8%8B%E6%B1%A0/</guid>
      <description>线程池 线程池的意义：频繁的创建和销毁线程，性能开销比较大。线程池创建一些线程，执行完任务后不立即销毁，可以等待去执行下一个任务
线程池相关参数：
/** * 用给定的初始参数创建一个新的ThreadPoolExecutor。 */ public ThreadPoolExecutor(int corePoolSize,//线程池的核心线程数量  int maximumPoolSize,//线程池的最大线程数  long keepAliveTime,//当线程数大于核心线程数时，多余的空闲线程存活的最长时间  TimeUnit unit,//时间单位  BlockingQueue&amp;lt;Runnable&amp;gt; workQueue,//任务队列，用来储存等待执行任务的队列  ThreadFactory threadFactory,//线程工厂，用来创建线程，一般默认即可  RejectedExecutionHandler handler//拒绝策略，当提交的任务过多而不能及时处理时，我们可以定制策略来处理任务  ) 线程池支持5种，Executors静态方法创建：
 FixedThreadPool：固定数量的线程，其他线程放入无界等待队列 CachedThreadPool：线程数量不固定，无论多少任务都会不停的创建线程。线程空闲一定时间，释放线程 SingleThread：线程池里只有一个线程，其他线程放入无界等待队列 ScheduledThread：提交的线程，会在等待的时间过后才会去执行 WorkStealingPool：底层使用forkjoin来执行  // 存放线程池的运行状态 (runState) 和线程池内有效线程的数量 (workerCount)  private final AtomicInteger ctl = new AtomicInteger(ctlOf(RUNNING, 0)); /** * Set containing all worker threads in pool. Accessed only when * holding mainLock. */ private final HashSet&amp;lt;Worker&amp;gt; workers = new HashSet&amp;lt;Worker&amp;gt;(); private static int workerCountOf(int c) { return c &amp;amp; CAPACITY; } private final BlockingQueue&amp;lt;Runnable&amp;gt; workQueue; public void execute(Runnable command) { // 如果任务为null，则抛出异常。  if (command == null) throw new NullPointerException(); // ctl 中保存的线程池当前的一些状态信息  int c = ctl.</description>
    </item>
    
    <item>
      <title>SpringCloud源码| 从单体到微服务</title>
      <link>https://leyou240.github.io/post/sc_%E4%BB%8E%E5%8D%95%E4%BD%93%E5%88%B0%E5%BE%AE%E6%9C%8D%E5%8A%A1/</link>
      <pubDate>Thu, 12 Dec 2019 21:00:00 +0800</pubDate>
      
      <guid>https://leyou240.github.io/post/sc_%E4%BB%8E%E5%8D%95%E4%BD%93%E5%88%B0%E5%BE%AE%E6%9C%8D%E5%8A%A1/</guid>
      <description>1、代码重复问题 拆分成多个服务，通过网络请求不同的服务。代码不再耦合重复
2、多人协作效率问题 各种专注于自己的小范围即可，代码不会与其他服务冲突。测试上线不依赖其他服务
3、扩容问题 之前其他服务(cpu/内存/网络/io)问题会导致服务宕机，现在各自独立部署，独立扩容。节省资源
4、可用性问题 依赖的其他服务宕机，是他自己的事。做好熔断降级就好了。</description>
    </item>
    
    <item>
      <title>归档</title>
      <link>https://leyou240.github.io/archives/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://leyou240.github.io/archives/</guid>
      <description></description>
    </item>
    
    <item>
      <title>搜索</title>
      <link>https://leyou240.github.io/search/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://leyou240.github.io/search/</guid>
      <description></description>
    </item>
    
  </channel>
</rss>
