<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
    <channel>
        <title>Jdk源码 on 专注于Java、Golang、软件架构、项目管理</title>
        <link>http://localhost:1313/categories/jdk%E6%BA%90%E7%A0%81/</link>
        <description>Recent content in Jdk源码 on 专注于Java、Golang、软件架构、项目管理</description>
        <generator>Hugo -- gohugo.io</generator>
        <language>zh-cn</language>
        <lastBuildDate>Mon, 31 Mar 2014 21:00:00 +0800</lastBuildDate><atom:link href="http://localhost:1313/categories/jdk%E6%BA%90%E7%A0%81/index.xml" rel="self" type="application/rss+xml" /><item>
        <title>Hashmap源码</title>
        <link>http://localhost:1313/posts/java/jdk/jdk2/</link>
        <pubDate>Mon, 31 Mar 2014 21:00:00 +0800</pubDate>
        
        <guid>http://localhost:1313/posts/java/jdk/jdk2/</guid>
        <description>&lt;h1 id=&#34;hashmap&#34;&gt;Hashmap
&lt;/h1&gt;&lt;p&gt;&lt;img src=&#34;http://localhost:1313/posts/java/jdk/jdk2/03_hashmap%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84.png&#34;
	width=&#34;567&#34;
	height=&#34;627&#34;
	srcset=&#34;http://localhost:1313/posts/java/jdk/jdk2/03_hashmap%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84_hu16961457512706720457.png 480w, http://localhost:1313/posts/java/jdk/jdk2/03_hashmap%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84_hu11267825771882653803.png 1024w&#34;
	loading=&#34;lazy&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;90&#34;
		data-flex-basis=&#34;217px&#34;
	
&gt;&lt;/p&gt;
&lt;p&gt;对key进行hash，放到数组对应的位置 p = tab[i = (n - 1) &amp;amp; hash] 。i的位置为i = (n - 1) &amp;amp; hash&lt;/p&gt;</description>
        </item>
        <item>
        <title>ArrayList和LinkedList集合源码</title>
        <link>http://localhost:1313/posts/java/jdk/jdk01/</link>
        <pubDate>Thu, 13 Mar 2014 21:00:00 +0800</pubDate>
        
        <guid>http://localhost:1313/posts/java/jdk/jdk01/</guid>
        <description>&lt;h2 id=&#34;arraylist&#34;&gt;ArrayList
&lt;/h2&gt;&lt;p&gt;底层使用数组实现，适合插入较少&lt;/p&gt;
&lt;p&gt;适合随机查找O(1)，原理：地址连续&lt;/p&gt;
&lt;p&gt;扩容O(n) 源码中int newCapacity = oldCapacity + (oldCapacity &amp;raquo; 1);即扩容为原来的1.5倍&lt;/p&gt;</description>
        </item>
        
    </channel>
</rss>
